// SkSurfaceProps
enum SkPixelGeometry {
    "kUnknown_SkPixelGeometry",
    "kRGB_H_SkPixelGeometry",
    "kBGR_H_SkPixelGeometry",
    "kRGB_V_SkPixelGeometry",
    "kBGR_V_SkPixelGeometry"
};

enum SkSurfaceProps_Flags {
    "SkSurfaceProps::kUseDeviceIndependentFonts_Flag"
};

enum SkSurfaceProps_InitType {
    "SkSurfaceProps::kLegacyFontHost_InitType"
};

interface SkSurfaceProps {
    void SkSurfaceProps(long flags, SkPixelGeometry geo);
    void SkSurfaceProps(SkSurfaceProps_InitType initType);
    void SkSurfaceProps(long flags, SkSurfaceProps_InitType initType);
    void SkSurfaceProps([Const, Ref]SkSurfaceProps other)

    [Const] long flags();
    [Const] SkPixelGeometry pixelGeometry();
    [Const] boolean isUseDeviceIndependentFonts();

    [Operator="==", Const] boolean equals([Const, Ref] SkSurfaceProps that);
};
// ^ SkSurfaceProps

//SkCanvas
enum SkCanvas_PrivateSaveLayerFlags {
    "SkCanvas::kDontClipToLayer_PrivateSaveLayerFlag"
};

interface SkCanvas {

    void SkCanvas();

    void SkCanvas(long width, long height, SkSurfaceProps props)

    void clear(unsigned long color);

    void translate(float dx, float dy);
};
// ^ SkCanvas

// TODO SkImageInfo

// SkSurface
callback releaseProc = void (VoidPtr pixels, VoidPtr context)

enum SkSurface_ContentChangeMode {
    "SkSurface::kDiscard_ContentChangeMode",
    "SkSurface::kRetain_ContentChangeMode"
};

enum SkSurface_BackendHandleAccess {
    "SkSurface::kFlushRead_BackendHandleAccess",
    "SkSurface::kFlushWrite_BackendHandleAccess",
    "SkSurface::kDiscardWrite_BackendHandleAccess"
};

interface SkSurface {
    static SkSurface MakeRasterDirect([Const, Ref] SkImageInfo imageInfo, VoidPtr pixels,
                                             unsigned long rowBytes,
                                             [Const] SkSurfaceProps surfaceProps);

    static SkSurface MakeRasterDirectReleaseProc([Const, Ref] SkImageInfo imageInfo, VoidPtr pixels,
                                    unsigned long rowBytes,
                                    releaseProc,
                                    VoidPtr context, [Const] SkSurfaceProps surfaceProps);

    static SkSurface MakeRaster([Const, Ref] SkImageInfo imageInfo, unsigned long rowBytes,
                                        [Const] SkSurfaceProps surfaceProps);

    static SkSurface MakeRasterN32Premul(long width, long height, SkSurfaceProps props);

    void SkSurface();

    [Const] long width();

    [Const] long height();

    unsigned long generationID();

    void notifyContentWillChange(SkSurface_ContentChangeMode mode);

    SkCanvas getCanvas();

}
// ^ SkSurface

// SkPaint
interface SkPaint {
    void SkPaint();

    void SkPaint([Const, Ref]SkPaint paint);

    void setAntiAlias(boolean aa);
};
// ^ SkPaint

// SkPath
interface SkPath {

    void SkPath();

    void SkPath([Const, Ref] SkPath path);

    void moveTo(float x, float y);

    void lineTo(float x, float y);

    void close();
};
// ^  SkPath
